import { supabase } from './supabaseClient'; // Assume Supabase client is configured

// Types
type User = {
  id: string;
  location: { lat: number; lng: number };
};

type Employee = {
  id: string;
  name: string;
  location: { lat: number; lng: number };
};

type PriceQuote = {
  id: string;
  amount: number;
  isRevised: boolean;
  employeeId: string;
  requestId: string;
};

type Request = {
  id: string;
  userId: string;
  status: 'pending' | 'quoted' | 'revised' | 'accepted' | 'in_progress' | 'completed' | 'declined';
  currentEmployeeId: string | null;
  blacklistedEmployeeIds: string[]; // Per-request blacklist
  employeeDeclineCounts: Record<string, number>; // Track decline counts per employee
  acceptedQuoteAmount: number | null; // Store accepted quote amount
};

// State Manager
class RequestManager {
  private activeRequests: Map<string, Request> = new Map();
  private employees: Employee[] = []; // Available employees
  private requestQueue: string[] = []; // IDs of pending requests

  // Initialize by loading employees from Supabase
  async initialize() {
    try {
      const { data, error } = await supabase
        .from('employee_simulation')
        .select('*');
      
      if (error) throw error;
      this.employees = data || [];
    } catch (error) {
      console.error('Error loading employees:', error);
      this.notifyError('Failed to load employees. Please try again later.');
    }
  }

  // User creates request
  async createRequest(userId: string): Promise<string> {
    const requestId = `req_${Date.now()}`;
    const newRequest: Request = {
      id: requestId,
      userId,
      status: 'pending',
      currentEmployeeId: null,
      blacklistedEmployeeIds: [],
      employeeDeclineCounts: {},
      acceptedQuoteAmount: null,
    };
    
    this.activeRequests.set(requestId, newRequest);
    this.requestQueue.push(requestId);
    this.processQueue();
    return requestId;
  }

  // Assign request to available employee
  private processQueue() {
    for (const requestId of [...this.requestQueue]) {
      const request = this.activeRequests.get(requestId)!;
      const availableEmployees = this.employees.filter(
        e => !request.blacklistedEmployeeIds.includes(e.id)
      );
      
      if (availableEmployees.length === 0) {
        // No available employees
        request.status = 'declined';
        this.activeRequests.set(requestId, request);
        this.requestQueue = this.requestQueue.filter(id => id !== requestId);
        this.notifyNoEmployeeAvailable(requestId);
        continue;
      }
      
      // Randomly select an available employee
      const randomIndex = Math.floor(Math.random() * availableEmployees.length);
      const selectedEmployee = availableEmployees[randomIndex];
      
      this.assignEmployee(requestId, selectedEmployee.id);
      this.requestQueue = this.requestQueue.filter(id => id !== requestId);
    }
  }

  // Employee accepts request
  private async assignEmployee(requestId: string, employeeId: string) {
    const request = this.activeRequests.get(requestId)!;
    request.currentEmployeeId = employeeId;
    request.status = 'quoted';
    // Initialize decline count for this employee
    request.employeeDeclineCounts[employeeId] = 0;
    this.activeRequests.set(requestId, request);

    // Generate initial price quote
    const quote = await this.generatePriceQuote(requestId, employeeId);
    this.sendQuoteToUser(quote);
  }

  private async generatePriceQuote(requestId: string, employeeId: string, isRevised = false): Promise<PriceQuote> {
    const baseAmount = Math.floor(Math.random() * 100) + 50; // Base price
    const amount = isRevised ? Math.floor(baseAmount * 0.8) : baseAmount; // 20% discount for revised
    
    return {
      id: `quote_${Date.now()}`,
      amount,
      isRevised,
      employeeId,
      requestId,
    };
  }

  // User declines quote
  async handleDecline(quote: PriceQuote) {
    const request = this.activeRequests.get(quote.requestId)!;
    const employeeId = quote.employeeId;
    
    // Increment decline count for this employee
    const declineCount = (request.employeeDeclineCounts[employeeId] || 0) + 1;
    request.employeeDeclineCounts[employeeId] = declineCount;

    if (declineCount === 1) {
      // First decline - send revised quote
      const revisedQuote = await this.generatePriceQuote(request.id, employeeId, true);
      revisedQuote.isRevised = true;
      this.sendQuoteToUser(revisedQuote);
    } else {
      // Second decline - blacklist employee
      request.blacklistedEmployeeIds.push(employeeId);
      request.currentEmployeeId = null;
      this.activeRequests.set(request.id, request);
      
      // Requeue request for new assignment
      this.requestQueue.push(request.id);
      this.processQueue();
    }
  }

  // User accepts quote
  async handleAccept(quote: PriceQuote) {
    const request = this.activeRequests.get(quote.requestId)!;
    request.status = 'accepted';
    request.acceptedQuoteAmount = quote.amount;
    this.activeRequests.set(request.id, request);

    // Start employee movement
    this.simulateEmployeeMovement(request);
  }

  private async simulateEmployeeMovement(request: Request) {
    const employee = this.employees.find(e => e.id === request.currentEmployeeId)!;
    
    // Simulate travel time (5 seconds)
    setTimeout(async () => {
      request.status = 'in_progress';
      this.activeRequests.set(request.id, request);

      // Complete request after arrival
      setTimeout(() => this.completeRequest(request.id), 2000);
    }, 5000);
  }

  private async completeRequest(requestId: string) {
    const request = this.activeRequests.get(requestId)!;
    request.status = 'completed';
    this.activeRequests.delete(requestId);

    // Store in Supabase
    await this.storeFinishedRequest(request);
  }

  private async storeFinishedRequest(request: Request) {
    try {
      const employee = this.employees.find(e => e.id === request.currentEmployeeId);
      if (!employee) throw new Error('Employee not found');

      // Fetch user details
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('username')
        .eq('id', request.userId)
        .single();

      if (userError) throw userError;

      // Store in user_history
      await supabase
        .from('user_history')
        .insert({
          request_id: request.id,
          user_id: request.userId,
          employee_id: request.currentEmployeeId,
          employee_name: employee.name,
          amount: request.acceptedQuoteAmount,
          completed_at: new Date().toISOString()
        });

      // Store in simulated_employee_history
      await supabase
        .from('simulated_employee_history')
        .insert({
          request_id: request.id,
          user_id: request.userId,
          user_name: userData?.username || `User_${request.userId.slice(0, 5)}`,
          employee_id: request.currentEmployeeId,
          amount: request.acceptedQuoteAmount,
          completed_at: new Date().toISOString()
        });

      // Clean up history tables
      await this.cleanHistoryTables(request.userId, request.currentEmployeeId!);
      
      // Close related UI components
      this.closeRequestWindows(request.id);
    } catch (error) {
      console.error('Error storing finished request:', error);
      this.notifyError('Failed to save request details. Please try again.');
    }
  }

  private async cleanHistoryTables(userId: string, employeeId: string) {
    try {
      // Clean user_history
      const { data: userHistory, error: userError } = await supabase
        .from('user_history')
        .select('id, completed_at')
        .eq('user_id', userId)
        .order('completed_at', { ascending: false });

      if (!userError && userHistory && userHistory.length >= 20) {
        const idsToDelete = userHistory.slice(1).map(entry => entry.id);
        await supabase
          .from('user_history')
          .delete()
          .in('id', idsToDelete);
      }

      // Clean simulated_employee_history
      const { data: empHistory, error: empError } = await supabase
        .from('simulated_employee_history')
        .select('id, completed_at')
        .eq('employee_id', employeeId)
        .order('completed_at', { ascending: false });

      if (!empError && empHistory && empHistory.length >= 20) {
        const idsToDelete = empHistory.slice(1).map(entry => entry.id);
        await supabase
          .from('simulated_employee_history')
          .delete()
          .in('id', idsToDelete);
      }
    } catch (error) {
      console.error('Error cleaning history tables:', error);
    }
  }

  // UI related functions
  private sendQuoteToUser(quote: PriceQuote) {
    /* Implementation for showing quote in UI */
  }

  private closeRequestWindows(requestId: string) {
    /* Implementation for closing UI components */
  }

  private notifyNoEmployeeAvailable(requestId: string) {
    /* Show notification that no employees are available */
  }

  private notifyError(message: string) {
    /* Show error notification to user */
  }
}

// Usage Example
const manager = new RequestManager();
await manager.initialize();

// Simulate user flow
async function simulateUserFlow() {
  // User creates request
  const requestId = await manager.createRequest('user123');
  
  // Later when quote is received...
  // manager.handleAccept(quote);
  // or
  // manager.handleDecline(quote);
}